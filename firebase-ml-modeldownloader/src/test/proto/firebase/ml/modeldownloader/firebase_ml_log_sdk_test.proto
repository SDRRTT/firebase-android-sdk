// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package firebase_ml_modeldownloader;

option java_package = "com.google.android.firebase.ml.modeldownloader.proto";
option java_multiple_files = true;

// This proto file is structured as follows:
// 1. Messages about component information: systems, events, models.
// 2. Log events for APIs: cloudML inference, etc. The
// options passed to each API call is defined next to the API log events.
// Within the API log events, APIs of the similar nature are grouped together.
// For example, cloud inference log events are grouped together.

// Information about various parts of the system: app, Firebase, SDK, TFLite.
message SystemInfo {
  // The application's unique id.  On Android, this is the package
  // name, e.g., "com.hello.world". On iOS, this is Bundle ID. See
  // https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/AppID.html
  string app_id = 1 ;

  // Application version string.  On Android, this is the version name (not the
  // version code). On iOS, this is "version_number" + "#" + "build_number".
  // See here for the definitions of version number and build number.
  // https://developer.apple.com/library/content/technotes/tn2420/_index.html#//apple_ref/doc/uid/DTS40016603-CH1-DEFINITIONS
  string app_version = 2;

  // Uniquely identifiable id associated with the Firebase project. Might be an
  // empty string if the developer does not pass a correct FirebaseOptions with
  // a valid Firebase Project ID.
  string firebase_project_id = 3;

  // The API key of the firebase project.
  string api_key = 7 ;

}
//
//// Information about models.
//message ModelInfo {
//
//  // The name of the model defined by the model creator. This string should be
//  // meaningful to the creator and describes what the model does. For example,
//  // the name can be "mobile vision face recognition" or "speech to text".
//  string name = 1 ;
//
//  // The version of the model defined by the model creator.
//  string version = 2 ;
//
//  // The expected checksum (SHA256) of the model file. Only hash of models
//  // downloaded from cloud is logged.
//  string hash = 5;
//
//  // Next tag: 4
//  // The model type is currently envisioned to be used mainly for model
//  // download/update. As a result, we can add other model types when they are
//  // enabled for remote model download.
//  // Besides download/update, there can be other cases where this field is
//  // useful. It is up to the developer as to how to use it in those cases.
//  enum ModelType {
//    TYPE_UNKNOWN = 0;
//    CUSTOM = 1;
//  }
//  ModelType model_type = 6;
//}

// For this enum, we allocate tags in blocks of 10,
// with a different block for each different API's events.
// The next available block of tags is 311-320.
enum EventName {
  UNKNOWN_EVENT = 0;
  // ==============================================
  // The following is for internally driven events.
  // ==============================================
  MODEL_DOWNLOAD = 100;
  MODEL_UPDATE = 101;

}
//
//// A list of error codes for various components of the system. For model
//// inference, the range of error codes is 1 to 99.  For model downloading, the
//// range of error codes is 100 to 199.
//enum ErrorCode {
//  // No error at all.
//  NO_ERROR = 0;
//
//
//  // The download started on a valid condition but didn't finish successfully.
//  DOWNLOAD_FAILED = 104;
//
//
//  // An unknown error has occurred. This is for conditions that should never
//  // happen. But we log them anyways.  If there is a surge in UNKNOWN error
//  // codes, we need to check our code.
//  UNKNOWN_ERROR = 9999;
//}
//
//// Detailed information about a model.
//// The message used to be named "CustomModelOptions".
//message ModelOptions {
//
//  // Inherent properties about the model: name, version, URI, source.
//  ModelInfo model_info = 1;
//
//  // True if models can be updated.
//  bool is_model_update_enabled = 4;
//}
//
//// Information about model downloading. A single model download request may
//// result in multiple log entries. "download_status" in the log entry indicates
//// during which stage it is logged.
//// This message used to be named "CustomModelDownloadLogEvent".
//message ModelDownloadLogEvent {
//  // The download status. The model download is made up of two major stages: the
//  // retrieval of the model info in Firebase backend, and then the download of
//  // the model file in GCS. Whether or not the download is requested implicitly
//  // or explicitly does not affect the later stages of the download. As a
//  // result, later stages (i.e. enum tag 3+) do not distinguish between explicit
//  // and implicit triggering.
//  enum DownloadStatus {
//    UNKNOWN_STATUS = 0;
//
//    // The download of the model file succeeded.
//    SUCCEEDED = 7;
//
//    // The download of the model file failed.
//    FAILED = 8;
//  }
//
//  // Model information and options for downloading.
//  ModelOptions options = 1;
//
//  // The rough duration of the download. This is not marked as
//  // ST_SENSITIVE_TIMESTAMP because it is a duration instead of a timestamp.
//  // We delegate the download to OS downloader. We may not be notified
//  // when the download completes, such as when the app is killed.
//  uint64 rough_download_duration_ms = 2;
//
//  // The error code for model download.
//  ErrorCode error_code = 3;
//
//  // The exact duration of the download. This is not marked as
//  // ST_SENSITIVE_TIMESTAMP because it is a duration instead of a timestamp.
//  // We know the exact duration when the download is completed while the app is
//  // still alive and receives the completed notification from OS downloader.
//  uint64 exact_download_duration_ms = 4;
//
//  // The download status.
//  DownloadStatus download_status = 5;
//
//  // If this field is logged for DownloadStatus.MODEL_INFO_RETRIEVAL_FAILED, it
//  // is the http status code from the firebase console. See
//  // go/firebase-ml-model-hosting-design. Same on both Android and iOS.
//  // If this field is logged for DownloadStatus.FAILED, it is the http status
//  // code on iOS, and the DownloadManager's "COLUMN_REASON" value on Android. On
//  // iOS, the status code can be a negative integer.
//  // See
//  // https://developer.android.com/reference/android/app/DownloadManager.html#COLUMN_REASON
//  int64 download_failure_status = 6;
//}


// Main log event for FirebaseMl, that contains individual API events, like face
// detection.
// NEXT ID: 44.
message TestEvent {
  // Information about various parts of the system: app, Firebase, SDK, TFLite.
  SystemInfo system_info = 1;

  // The event name. It can be an API call, or an internally driven event like
  // model download. If it is an API call, then one of the XXXXLogEvents will be
  // populated. For example, if EventName is CLOUD_FACE_DETECT, then
  // CloudFaceDetectionLogEvent will be populated.  If it is DOWNLOAD, then
  // CustomModelDownloadLogEvent will be populated.
  EventName event_name = 2;

  // Below are the log events that will be populated depending on event_name.
  // These log events are about API calls or internal events like model
  // download.
  // ==========================================================================

  // Model downloading logs.
  // ==========================

  // Information about model download.
  // This field used to be of type "CustomModelDownloadLogEvent" with field name
  // "custom_model_download_log_event".
  //ModelDownloadLogEvent model_download_log_event = 3;
}